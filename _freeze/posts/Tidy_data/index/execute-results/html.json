{
  "hash": "0cfd2f25d0fa0b31771206865f82e788",
  "result": {
    "markdown": "---\ntitle: \"Tidy data and ggplot2?\"\nauthor: \"Lachlan Bourke\"\ndate: \"2022-11-02\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\nHi everyone! In this post we are going to talk about the tidyverse, specifically how to get our data into the tidy format and why this matters when using ggplot2! Are you ready to enter the tidyverse? First things first you will need to install the package \"tidyverse\" and then load it in your r script using the following code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\nSo what is the tidyverse? Simply, ..... For more detailed information on the tidyverse and how to use it to its full advantage, see..... . One of the packages is ggplot2 - an amazing package that can be used to produce figures in R (think bar graphs, line graphs, scatter plots, etc.). For more information on this package see. Note, that this blog post isn't an introduction to tidyverse or ggplot2, but rather highlights the importance making figures with tidy data. It is expected you have some background in these packages. I will quickly explain what tidy data is though!\n\nTidy data is a way to set up your data. Simply, columns are variables, rows are observations, and each cell is a single value.\n\n![](images/tidy-1.png)\n\ncredit: [R for Data Science (2e) - 6  Data tidying (hadley.nz)](https://r4ds.hadley.nz/data-tidy.html)\n\n\nI highly recommend you read this:\n[Tidy data for efficiency, reproducibility, and collaboration (openscapes.org)](https://www.openscapes.org/blog/2020/10/12/tidy-data/)\n\nSo, why does tidy data matter? Imagine if everybody's data sets were set up the same way! You could use the same code to work with them! It makes life easier. The reason for this blog post is that it will make your life a lot easier when making figures in ggplot2. Let's look at an example. Below I've loaded in some data looking at how quickly snake X clots the blood and how well antivenom works for snake X. The first column is venom concentration, followed by three columns (three replicates) of venom with no antivenom, three columns of venom incubated with antivenom 1, three coumns of venom incubated with antivenom 2, and three columns of venom incubated with antivenom 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nvenom_data<-read_csv(\"venom_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 8 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (13): Concentration, BC_1, BC_2, BC_3, BC_ICP1, BC_ICP2, BC_ICP3, BC_But...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nvenom_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 13\n  Concentrat…¹  BC_1  BC_2  BC_3 BC_ICP1 BC_ICP2 BC_ICP3 BC_Bu…² BC_Bu…³ BC_Bu…⁴\n         <dbl> <dbl> <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1       20      14.3  14.1  14.1    15.9    16.1    16.4    21.3    21.2    20.7\n2       10      16.3  16.3  16.2    19.1    19.5    19.1    35      34.1    33.4\n3        4      19.5  19.5  19.5    25      25.6    25.5    59.7    61.1    61.1\n4        1.66   24.1  23.5  23.1    33.3    32.8    33.1    88.2    90.6    88  \n5        0.66   29.5  29.5  28.6    44.7    44      42.7   125     131.    129. \n6        0.25   36.5  37.3  36.2    58      59.6    59.2   179.    187     186. \n7        0.125  43.3  43.8  42.4    68.9    71.8    71.8   220.    228.    231. \n8        0.05   81    85.8  78.1   118.    110.    121.    272     263     277. \n# … with 3 more variables: BC_ATri1 <dbl>, BC_ATri2 <dbl>, BC_ATri3 <dbl>, and\n#   abbreviated variable names ¹​Concentration, ²​BC_Butantan1, ³​BC_Butantan2,\n#   ⁴​BC_Butantan3\n```\n:::\n:::\n\n\nNow that the data is loaded we want to modify the raw data so we have the mean and standard deviation values. We will then use this summarised data to make a plot that looks like this:\n\n![](images/2bced39e-0d62-4c49-885d-10e4905d74be.png)\n\nOkay, let's talk about this graph, so you can understand the data a bit better.\n\n1.  **Data not tidied! :(**\n\nLet's summarise our data (get means and standard deviation), but not worry about tidying the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvenom_data_summarised <- venom_data %>% #Calculate standard deviation for each venom and venom + antivenom at each concentration\n  rowwise() %>% \n  mutate(BC_mean = (BC_1+BC_2+BC_3)/3, \n         BC_ICP_mean = (BC_ICP1+BC_ICP2+BC_ICP3)/3, \n         BC_Butantan_mean = (BC_Butantan1+BC_Butantan2+BC_Butantan3)/3,\n         BC_ATri_mean = (BC_ATri1 + BC_ATri2 + BC_ATri3)/3) %>% \n  mutate(BC_sd = sd(c_across(BC_1:BC_3)),\n    BC_ICP_sd = sd(c_across(BC_ICP1:BC_ICP3)),\n    BC_Butantan_sd = sd(c_across(BC_Butantan1:BC_Butantan3)),\n    BC_ATri_sd = sd(c_across(BC_ATri1:BC_ATri3)))%>%\n  select(Concentration,BC_mean, BC_ICP_mean, BC_Butantan_mean, BC_ATri_mean, \n         BC_sd, BC_ICP_sd, BC_Butantan_sd, BC_ATri_sd)\nvenom_data_summarised\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 9\n# Rowwise: \n  Concentration BC_mean BC_ICP_…¹ BC_Bu…² BC_AT…³  BC_sd BC_IC…⁴ BC_Bu…⁵ BC_AT…⁶\n          <dbl>   <dbl>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n1        20        14.2      16.1    21.1    15.2 0.115    0.252   0.321   0.100\n2        10        16.3      19.2    34.2    17.7 0.0577   0.231   0.802   0.361\n3         4        19.5      25.4    60.6    22.9 0        0.321   0.808   0.153\n4         1.66     23.6      33.1    88.9    30.1 0.503    0.252   1.45    0.777\n5         0.66     29.2      43.8   128.     40.8 0.520    1.01    3.17    1.29 \n6         0.25     36.7      58.9   184.     54.7 0.569    0.833   4.11    0.208\n7         0.125    43.2      70.8   226.     73.2 0.709    1.67    5.67   10.1  \n8         0.05     81.6     117.    271.     99.5 3.89     5.72    7.27   15.8  \n# … with abbreviated variable names ¹​BC_ICP_mean, ²​BC_Butantan_mean,\n#   ³​BC_ATri_mean, ⁴​BC_ICP_sd, ⁵​BC_Butantan_sd, ⁶​BC_ATri_sd\n```\n:::\n:::\n\n\nWith our data now summarised we can use this new data frame to make our graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwindowsFonts(Times=windowsFont(\"Times New Roman\")) \n\ncolors <- c(\"Venom\"=\"red\", \"Venom + antivenom 1\"=\"green\", \"Venom + antivenom 2\" = \"brown\", \"Venom + antivenom 3\" = \"blue\")\n\nBC_graph <- ggplot(venom_data_summarised, aes(x=Concentration)) +\n  geom_line(aes(y=BC_mean, color = \"Venom\"), linewidth = 1) +\n  geom_point(aes(y=BC_mean, colour = \"Venom\"), size = 2)+\n  geom_line(aes(y=BC_ICP_mean, color = \"Venom + antivenom 1\"), linewidth = 1) +\n  geom_point(aes(y=BC_ICP_mean, color = \"Venom + antivenom 1\"), size = 2) +\n  geom_line(aes(y=BC_Butantan_mean, color = \"Venom + antivenom 2\"), linewidth = 1) +\n  geom_point(aes(y=BC_Butantan_mean, color = \"Venom + antivenom 2\"), size = 2) +\n  geom_line(aes(y=BC_ATri_mean, color = \"Venom + antivenom 3\"), linewidth = 1) +\n  geom_point(aes(y=BC_ATri_mean, color = \"Venom + antivenom 3\"), size = 2) +\n  theme_classic() + #theme\n  theme(plot.margin = margin(1,1,1.5,1.2, \"cm\"), #margins\n        axis.text = element_text(face = \"bold\", color=\"black\", family = \"Times\", size = 12), # Axis text formatting\n        axis.title = element_text(face = \"bold\", color=\"black\", family = \"Times\", size = 14),# Axis title text formatting\n        axis.line = element_line(linewidth=1), axis.ticks = element_line(linewidth = 1), # Axis line and tick size\n        legend.title = element_text(face = \"bold\", family = \"Times\", size = 12),\n        legend.text = element_text(face = \"bold\", family = \"Times\"))+\n  scale_x_continuous(trans = \"log10\", breaks = c(0.2, 2, 20), expand = expansion(mult = c(0,0.01)))+ #log scale, breaks, and intercept of y and x axis = 0 (no gap before line graph)\n  scale_y_continuous(expand = c(0,0), limits = c(0, 400)) + #limits\n  labs(x = \"Concentration (μg/mL)\", y = \"Clotting time (s)\", color = \"Legend\")+\n  scale_color_manual(values = colors) +\n  geom_errorbar(aes(ymin=BC_mean-BC_sd, ymax=BC_mean+BC_sd), width = 0.02, size = 0.8, color = \"red\") +\n  geom_errorbar(aes(ymin=BC_ICP_mean-BC_ICP_sd, ymax=BC_ICP_mean+BC_ICP_sd), width = 0.02, size = 0.8, color = \"green\") +\n  geom_errorbar(aes(ymin=BC_Butantan_mean-BC_Butantan_sd, ymax=BC_Butantan_mean+BC_Butantan_sd), width = 0.02, size = 0.8, color = \"brown\") +\n  geom_errorbar(aes(ymin=BC_ATri_mean-BC_ATri_sd, ymax=BC_ATri_mean+BC_ATri_sd),width = 0.02, size = 0.8, color = \"blue\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n```{.r .cell-code}\nBC_graph\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}